name: Publish Images

on:
  release:
    types:
      - "published"

concurrency:
  group: "releases"
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    name: Package / Docker / build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          # 0 indicates all history for all branches and tags.
          fetch-depth: 0
      - name: Set up Gradle and Java
        uses: ./.github/gradle-action
      - name: Docker / Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Docker / Set up Buildx
        uses: docker/setup-buildx-action@v3
      # Used to run docker scout
      - name: Docker / Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Used to push the created image
      - name: Docker / Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_GITHUB_TOKEN }}
      - name: Docker / Create image
        run: ./gradlew dockerBuild
      - name: Gradle Tasks Summary
        run: cat build/reports/build-times.md >> $GITHUB_STEP_SUMMARY
      - name: Docker / List images
        run: docker images
      - name: Docker / Get image name
        id: dockerImageName
        run: echo "dockerImageName=$(gradle -q dockerImageName)" >> "$GITHUB_OUTPUT"
      - name: Docker / Get image metadata
        id: dockerImageMetadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.dockerImageName.outputs.dockerImageName }}
      - name: Docker / Analyse image
        uses: docker/scout-action@v1
        continue-on-error: true
        with:
          command: quickview
          image: ${{ steps.dockerImageName.outputs.dockerImageName }}
          write-comment: false
          summary: true
      # Adapted from https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Docker / Test Image
        # From `docker run --help`:
        #   -d, --detach          Run container in background and print container ID
        #   --rm                  Automatically remove the container when it exits
        #   -p, --publish list    Publish a container's port(s) to the host
        run: |
          containerId=$(docker run -d --rm --publish 8080:8080 ${{ steps.dockerImageName.outputs.dockerImageName }})
          sleep 10
          docker container logs "$containerId"
          sleep 10
          docker container logs "$containerId"
          curl -I http://localhost:8080/
          ls -l .
          find . -name Dockerfile
          echo $PWD
          [ -d "$PWD/build" ] && ls -l "$PWD/build"
          [ -d "$PWD/build/docker" ] && ls -l "$PWD/build/docker"
          [ -d "$PWD/build/docker/main" ] && ls -l "$PWD/build/docker/main"
      - name: Docker / Publish to GitHub Registry
        uses: docker/build-push-action@v5
        with:
          file: $PWD/build/docker/main/Dockerfile
          push: true
          tags: ${{ steps.dockerImageMetadata.outputs.tags }}
          labels: ${{ steps.dockerImageMetadata.outputs.labels }}


#  build-docker-native:
#    name: Package / Docker / native
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          # 0 indicates all history for all branches and tags.
#          fetch-depth: 0
#      - name: Set up Gradle and Java
#        uses: ./.github/gradle-action
#      - name: Docker / Set up QEMU
#        uses: docker/setup-qemu-action@v3
#      - name: Docker / Set up Buildx
#        uses: docker/setup-buildx-action@v3
#      # Used to run docker scout
#      - name: Docker / Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      # Used to push the created image
#      - name: Docker / Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.RELEASE_GITHUB_TOKEN }}
#      - name: Docker / Create image
#        run: GRAALVM_QUICK_BUILD=true ./gradlew dockerBuildNative
#      - name: Gradle Tasks Summary
#        run: cat build/reports/build-times.md >> $GITHUB_STEP_SUMMARY
#      - name: Docker / List images
#        run: docker images
#      - name: Docker / Get image name
#        id: dockerImageName
#        run: echo "dockerImageName=$(gradle -q dockerImageName)" >> "$GITHUB_OUTPUT"
#      - name: Docker / Get image metadata
#        id: dockerImageMetadata
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ steps.dockerImageName.outputs.dockerImageName }}
#      - name: Docker / Analyse image
#        uses: docker/scout-action@v1
#        continue-on-error: true
#        with:
#          command: quickview
#          image: ${{ steps.dockerImageName.outputs.dockerImageName }}
#          write-comment: false
#          summary: true
#      # Adapted from https://docs.docker.com/build/ci/github-actions/test-before-push/
#      - name: Docker / Test Image
#        # From `docker run --help`:
#        #   -d, --detach          Run container in background and print container ID
#        #   --rm                  Automatically remove the container when it exits
#        #   -p, --publish list    Publish a container's port(s) to the host
#        run: |
#          containerId=$(docker run -d --rm --publish 8080:8080 ${{ steps.dockerImageName.outputs.dockerImageName }})
#          docker container logs "$containerId"
#          curl -I http://localhost:8080/
#      - name: Docker / Publish to GitHub Registry
#        uses: docker/build-push-action@v5
#        with:
#          file: ./build/docker/native-main/DockerfileNative
#          push: true
#          tags: ${{ steps.dockerImageMetadata.outputs.tags }}
#          labels: ${{ steps.dockerImageMetadata.outputs.labels }}
